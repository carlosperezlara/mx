#include <iostream>
#include "mxGeometry.h"

mxGeometry::mxGeometry() :
  fLastIdx(-1),
  fLyrIdx(-1),
  fX(0),
  fY(0),
  fZ(0),
  fSi_a0(0.186),
  fSi_a1(1.490),
  fSi_a2(0.050),
  fW_a0(6.400),
  fW_a1(6.400),
  fW_a2(0.204),
  fPbWO4_a0(2.100),
  fPbWO4_a1(2.100),
  fPbWO4_a2(25.00),
  fPbWO4_IdxS(196)
{
  float mx[96] = {
    +3.007, -3.593, -3.593, -10.193, -6.893, -13.493, +9.607, +3.007, +9.607, +16.207, +12.907, +19.507, 
    -3.007, +3.593, +3.593, +10.193, +6.893, +13.493, -9.607, -3.007, -9.607, -16.207, -12.907, -19.507, 
    -0.757, -7.357, -7.357, -13.957, -10.657, -17.257, +5.843, -0.757, +5.843, +12.443, +9.143, +15.743, 
    +0.757, +7.357, +7.357, +13.957, +10.657, +17.257, -5.843, +0.757, -5.843, -12.443, -9.143, -15.743, 
    -3.007, +3.593, +3.593, +10.193, +6.893, +13.493, -9.607, -3.007, -9.607, -16.207, -12.907, -19.507, 
    +3.007, -3.593, -3.593, -10.193, -6.893, -13.493, +9.607, +3.007, +9.607, +16.207, +12.907, +19.507, 
    +0.757, +7.357, +7.357, +13.957, +10.657, +17.257, -5.843, +0.757, -5.843, -12.443, -9.143, -15.743, 
    -0.757, -7.357, -7.357, -13.957, -10.657, -17.257, +5.843, -0.757, +5.843, +12.443, +9.143, +15.743};
  for(int i=0; i!=96; ++i) fSi_RX[i] = mx[i];
  float my[96] = {
    +17.257, +17.257, +10.657, +10.657, +4.057, +4.057, +17.257, +10.657, +10.657, +10.657, +4.057, +4.057, 
    -17.257, -17.257, -10.657, -10.657, -4.057, -4.057, -17.257, -10.657, -10.657, -10.657, -4.057, -4.057, 
    +19.507, +19.507, +12.907, +12.907, +6.307, +6.307, +19.507, +12.907, +12.907, +12.907, +6.307, +6.307, 
    -19.507, -19.507, -12.907, -12.907, -6.307, -6.307, -19.507, -12.907, -12.907, -12.907, -6.307, -6.307, 
    +17.257, +17.257, +10.657, +10.657, +4.057, +4.057, +17.257, +10.657, +10.657, +10.657, +4.057, +4.057, 
    -17.257, -17.257, -10.657, -10.657, -4.057, -4.057, -17.257, -10.657, -10.657, -10.657, -4.057, -4.057, 
    +19.507, +19.507, +12.907, +12.907, +6.307, +6.307, +19.507, +12.907, +12.907, +12.907, +6.307, +6.307, 
    -19.507, -19.507, -12.907, -12.907, -6.307, -6.307, -19.507, -12.907, -12.907, -12.907, -6.307, -6.307};
  for(int i=0; i!=96; ++i) fSi_RY[i] = my[i];
  float mz[16] = {-203.982, -204.636, -205.29, -205.944, -206.598, -207.252, -207.906, -208.560,
		  +203.982, +204.636, +205.29, +205.944, +206.598, +207.252, +207.906, +208.560};
  for(int i=0; i!=16; ++i) fSi_RZ[i] = mz[i];
  int lyrno[16] = { 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3 };
  for(int i=0; i!=16; ++i) fSi_LyrNbr[i] = lyrno[i];
  int dly[4] = {0,1,-1,-2};
  for(int i=0; i!=4; ++i) fSi_DLY[i] = dly[i];
  float sx[24] = {-6.600, +0.000, +6.600, -13.200, -6.600, +0.000, +6.600, +13.200, -16.500, -9.900, +9.900, +16.500,
		  -16.500, -9.900, +9.900, +16.500, -13.200, -6.600, +0.000, +6.600, +13.200, -6.600, +0.000, +6.600}; 
  for(int i=0; i!=24; ++i) fW_RX[i] = sx[i];
  float sy[24] = {+16.500, +16.500, +16.500, +9.900, +9.900, +9.900, +9.900, +9.900, +3.300, +3.300, +3.300, +3.300,
		  -3.300, -3.300, -3.300, -3.300, -9.900, -9.900, -9.900, -9.900, -9.900, -16.500, -16.500, -16.500};
  for(int i=0; i!=24; ++i) fW_RY[i] = sy[i];
  // MPC
  float mpcx[416] = {
    -5.8,-3.5,-1.3,-10.3,-8.1,-5.8,-3.5,-1.3,-12.6,-10.3,-8.1,-5.8,-3.5,-1.3,-14.8,-12.6,-10.3,-8.1,-5.8,-3.5,
    -1.3,-17.1,-14.8,-12.6,-10.3,-8.1,-5.8,-3.5,-1.3,-19.7,-19.7,-19.7,-19.7,-19.7,-19.7,-17.4,-17.4,-17.4,-17.4,-17.4,
    -17.4,-17.4,-17.4,-15.2,-15.2,-15.2,-15.2,-15.2,-15.2,-15.2,-15.2,-12.9,-12.9,-12.9,-12.9,-12.9,-12.9,-12.9,-12.9,-10.6,
    -10.6,-10.6,-10.6,-10.6,-10.6,-10.6,-10.6,-8.4,-8.4,-5.8,-3.5,-1.3,-10.3,-8.1,-5.8,-3.5,-1.3,-12.6,-10.3,-8.1,
    -5.8,-3.5,-1.3,-14.8,-12.6,-10.3,-8.1,-5.8,-3.5,-1.3,-17.1,-14.8,-12.6,-10.3,-8.1,-5.8,-3.5,-1.3,5.8,3.5,
    1.3,10.3,8.1,5.8,3.5,1.3,12.6,10.3,8.1,5.8,3.5,1.3,14.8,12.6,10.3,8.1,5.8,3.5,1.3,17.1,
    14.8,12.6,10.3,8.1,5.8,3.5,1.3,19.7,19.7,19.7,19.7,19.7,19.7,17.4,17.4,17.4,17.4,17.4,17.4,17.4,
    17.4,15.2,15.2,15.2,15.2,15.2,15.2,15.2,15.2,12.9,12.9,12.9,12.9,12.9,12.9,12.9,12.9,10.6,10.6,10.6,
    10.6,10.6,10.6,10.6,10.6,8.4,8.4,5.8,3.5,1.3,10.3,8.1,5.8,3.5,1.3,12.6,10.3,8.1,5.8,3.5,
    1.3,14.8,12.6,10.3,8.1,5.8,3.5,1.3,17.1,14.8,12.6,10.3,8.1,5.8,3.5,1.3,5.8,3.6,1.3,10.3,
    8.1,5.8,3.6,1.3,12.6,10.3,8.1,5.8,3.6,1.3,14.9,12.6,10.3,8.1,5.8,3.6,1.3,17.1,14.9,12.6,
    10.3,8.1,5.8,3.6,1.3,17.1,14.9,12.6,10.3,8.1,5.8,3.6,1.3,17.8,15.5,13.3,11.0,8.8,6.5,20.1,
    17.8,15.5,13.3,11.0,8.8,20.1,17.8,15.5,13.3,11.0,8.8,20.1,17.8,15.5,13.3,11.0,8.8,20.1,17.8,15.5,
    13.3,11.0,8.8,17.8,15.5,13.3,11.0,8.8,6.5,5.8,3.6,1.3,10.3,8.1,5.8,3.6,1.3,12.6,10.3,8.1,
    5.8,3.6,1.3,14.9,12.6,10.3,8.1,5.8,3.6,1.3,17.1,14.9,12.6,10.3,8.1,5.8,3.6,1.3,17.1,14.9,
    12.6,10.3,8.1,5.8,3.6,1.3,-5.8,-3.6,-1.3,-10.3,-8.1,-5.8,-3.6,-1.3,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3,
    -14.9,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3,-17.1,-14.9,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3,-17.1,-14.9,-12.6,-10.3,-8.1,
    -5.8,-3.6,-1.3,-17.8,-15.5,-13.3,-11.0,-8.8,-6.5,-20.1,-17.8,-15.5,-13.3,-11.0,-8.8,-20.1,-17.8,-15.5,-13.3,-11.0,
    -8.8,-20.1,-17.8,-15.5,-13.3,-11.0,-8.8,-20.1,-17.8,-15.5,-13.3,-11.0,-8.8,-17.8,-15.5,-13.3,-11.0,-8.8,-6.5,-5.8,
    -3.6,-1.3,-10.3,-8.1,-5.8,-3.6,-1.3,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3,-14.9,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3,
    -17.1,-14.9,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3,-17.1,-14.9,-12.6,-10.3,-8.1,-5.8,-3.6,-1.3};
  for(int i=0; i!=416; ++i) fPbWO4_RX[i] = mpcx[i];
  float  mpcy[416] = {
    19.5,19.5,19.5,17.3,17.3,17.3,17.3,17.3,15.0,15.0,15.0,15.0,15.0,15.0,12.7,12.7,12.7,12.7,12.7,12.7,
    12.7,10.5,10.5,10.5,10.5,10.5,10.5,10.5,10.5,5.7,3.4,1.1,-1.1,-3.4,-5.7,7.9,5.7,3.4,1.1,-1.1,
    -3.4,-5.7,-7.9,7.9,5.7,3.4,1.1,-1.1,-3.4,-5.7,-7.9,7.9,5.7,3.4,1.1,-1.1,-3.4,-5.7,-7.9,7.9,
    5.7,3.4,1.1,-1.1,-3.4,-5.7,-7.9,7.9,-7.9,-19.5,-19.5,-19.5,-17.3,-17.3,-17.3,-17.3,-17.3,-15.0,-15.0,-15.0,
    -15.0,-15.0,-15.0,-12.7,-12.7,-12.7,-12.7,-12.7,-12.7,-12.7,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-19.5,-19.5,
    -19.5,-17.3,-17.3,-17.3,-17.3,-17.3,-15.0,-15.0,-15.0,-15.0,-15.0,-15.0,-12.7,-12.7,-12.7,-12.7,-12.7,-12.7,-12.7,-10.5,
    -10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-5.7,-3.4,-1.1,1.1,3.4,5.7,-7.9,-5.7,-3.4,-1.1,1.1,3.4,5.7,
    7.9,-7.9,-5.7,-3.4,-1.1,1.1,3.4,5.7,7.9,-7.9,-5.7,-3.4,-1.1,1.1,3.4,5.7,7.9,-7.9,-5.7,-3.4,
    -1.1,1.1,3.4,5.7,7.9,-7.9,7.9,19.5,19.5,19.5,17.3,17.3,17.3,17.3,17.3,15.0,15.0,15.0,15.0,15.0,
    15.0,12.7,12.7,12.7,12.7,12.7,12.7,12.7,10.5,10.5,10.5,10.5,10.5,10.5,10.5,10.5,19.6,19.6,19.6,17.3,
    17.3,17.3,17.3,17.3,15.1,15.1,15.1,15.1,15.1,15.1,12.8,12.8,12.8,12.8,12.8,12.8,12.8,10.5,10.5,10.5,
    10.5,10.5,10.5,10.5,10.5,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,5.7,5.7,5.7,5.7,5.7,5.7,3.4,
    3.4,3.4,3.4,3.4,3.4,1.1,1.1,1.1,1.1,1.1,1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-3.4,-3.4,-3.4,
    -3.4,-3.4,-3.4,-5.6,-5.6,-5.6,-5.6,-5.6,-5.6,-19.6,-19.6,-19.6,-17.3,-17.3,-17.3,-17.3,-17.3,-15.0,-15.0,-15.0,
    -15.0,-15.0,-15.0,-12.8,-12.8,-12.8,-12.8,-12.8,-12.8,-12.8,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-8.3,-8.3,
    -8.3,-8.3,-8.3,-8.3,-8.3,-8.3,-19.6,-19.6,-19.6,-17.3,-17.3,-17.3,-17.3,-17.3,-15.0,-15.0,-15.0,-15.0,-15.0,-15.0,
    -12.8,-12.8,-12.8,-12.8,-12.8,-12.8,-12.8,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-10.5,-8.3,-8.3,-8.3,-8.3,-8.3,
    -8.3,-8.3,-8.3,5.7,5.7,5.7,5.7,5.7,5.7,3.4,3.4,3.4,3.4,3.4,3.4,1.1,1.1,1.1,1.1,1.1,
    1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-3.4,-3.4,-3.4,-3.4,-3.4,-3.4,-5.6,-5.6,-5.6,-5.6,-5.6,-5.6,19.6,
    19.6,19.6,17.3,17.3,17.3,17.3,17.3,15.1,15.1,15.1,15.1,15.1,15.1,12.8,12.8,12.8,12.8,12.8,12.8,12.8,
    10.5,10.5,10.5,10.5,10.5,10.5,10.5,10.5,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3};
  for(int i=0; i!=416; ++i) fPbWO4_RY[i] = mpcy[i];
  fPbWO4_RZ[0] = -220.9;
  fPbWO4_RZ[1] = +220.9;
}
//========
float mxGeometry::Reference(int k, int r) {
  if(k!=fLastIdx) UpdateVars(k);
  if(r==0) return fX;
  if(r==1) return fY;
  if(r==2) return fZ;
  if(r==3) return fLyrIdx;
  return -1;
}
//========
void mxGeometry::UpdateVars(int k) {
  // first 49152 correspond to key for SiW
  // next 576 correspond to chn for PbWO4
  if(k<49152) UpdateSiW(k);
  else UpdatePbWO4(k-49152);
}
//========
float mxGeometry::W_X(int sidx) {
  int sen = sidx%24;
  return fW_RX[sen];
}
//========
float mxGeometry::W_Y(int sidx) {
  int sen = sidx%24;
  return fW_RY[sen];
}
//========
float mxGeometry::W_Z(int sidx) {
  int lyr = sidx/24;
  float dz = 0.1 + fW_a2;
  float z = fSi_RZ[lyr] + dz*(lyr<8?+1:-1);
  return z;
}
//========
int mxGeometry::RefKey(int lyridx, int tb) {
  int ret=-1;
  if(tb<0||tb>1) return ret;
  if(lyridx<0||lyridx>16||lyridx==8) return ret;
  int lyr = lyridx;
  if(lyr>7) lyr--;
  int arm = lyr/8;
  lyr = lyr%8;
  int pktA[8] = {2,2,3,3,0,0,1,1};
  int keyA = pktA[lyr]*3072 + (lyr%2)*1536;
  int keyB = (pktA[lyr]+4)*3072 + (lyr%2)*1536;
  if(arm==1) {
    keyA += 24576;
    keyB += 24576;
  }
  if(arm==0 && tb==0) return keyB;
  if(arm==0 && tb==1) return keyA;
  if(arm==1 && tb==0) return keyA;
  if(arm==1 && tb==1) return keyB;
}
//========
int mxGeometry::Adjacent_Si_0(int idx) {
  int adj = idx;
  int mpd = idx%128;
  if( mpd>3 ) {
    adj -= 4;
  } else {
    adj *= -1;
  }
  return adj;
}
//========
int mxGeometry::Adjacent_Si_1(int idx) {
  int adj = idx;
  int mpd = idx%128;
  if( mpd<124 ) {
    adj += 4;
  } else {
    adj *= -1;
  }
  return adj;
}
//========
void mxGeometry::UpdateSiW(int key) {
  int k = key;
  int pkt = (k/3072)%8;

  //====================
  // fix for fem7 south
  if((key/3072)==7) {
    int sensor = (key%3072)/128;
    if(sensor<6) {
      k = key + 128*18;
    } else if(sensor>=18) {
      k = key - 128*18;
    }
  }
  //====================

  int arm = k/24576;
  int sen = (k%3072)/128;
  int lyr = fSi_LyrNbr[ 2*pkt + (sen/12) ];
  int senlyr = sen%12;
  int sgnTB = 1;
  int sgnAR = 1;
  if(pkt>3) {
    senlyr += 12;
    sgnTB = -1;
  }
  if(arm>0) sgnAR = -1;
  int typ = lyr % 2;
  int ref = arm*48 + typ*24 + senlyr;
  float x = fSi_RX[ref];
  float y = fSi_RY[ref];
  //float nx = fSi_RX[ref]/ (typ==0?fSi_a0:fSi_a1);
  //float ny = fSi_RY[ref]/ (typ==0?fSi_a1:fSi_a0);
  if(typ==0) {
    x -= sgnAR*sgnTB*((k%128)/4)*(fSi_a0+0.008);
    y += sgnTB*fSi_DLY[k%4]*(fSi_a1+0.008);
    //nx -= sgnAR*sgnTB*((k%128)/4);
    //ny += sgnTB*fSi_DLY[k%4];
  } else {
    y -= sgnTB*((k%128)/4)*(fSi_a0+0.008);
    x -= sgnAR*sgnTB*fSi_DLY[k%4]*(fSi_a1+0.008);
    //ny -= sgnTB*((k%128)/4);
    //nx -= sgnAR*sgnTB*fSi_DLY[k%4];
  }
  fX = x;
  fY = y;
  fZ = fSi_RZ[arm*8+lyr];
  fLyrIdx = arm*9+lyr;
  fLastIdx = k;
}
//========
float mxGeometry::RZ(int lyr) {
  if(lyr==8) {
    return fPbWO4_RZ[0];
  } else if(lyr==17) {
    return fPbWO4_RZ[1];
  } else {
    if(lyr<8) return fSi_RZ[lyr];
    else return fSi_RZ[lyr-1];
  }
}
//========
void mxGeometry::UpdatePbWO4(int k) {
  fX = fPbWO4_RX[k];
  fY = fPbWO4_RY[k];
  if(k<fPbWO4_IdxS) fZ = fPbWO4_RZ[0];
  else fZ = fPbWO4_RZ[1];
  int arm = k/288;
  fLyrIdx = arm*9+8;
  fLastIdx = k;
}
//========
int mxGeometry::PbWO4_FindIdx(int arm, float x, float y) {
  int a = 0;
  int b = fPbWO4_IdxS;
  if(arm==1) {
    a=fPbWO4_IdxS;
    b=416;
  }
  float dx = fPbWO4_a0/2;
  float dy = fPbWO4_a1/2;
  int ret = -1;
  int cn =0;
  bool foundinx = false;
  for(int i=a; i!=b; ++i) {
    if( fPbWO4_RX[i]-dx < x ) continue;
    if( fPbWO4_RX[i]+dx > x ) continue;
    foundinx = true;
    if( fPbWO4_RY[i]-dy < y ) continue;
    if( fPbWO4_RY[i]+dy > y ) continue;
    ret = i;
    cn++;
  }
  if(cn>0) std::cout << "mxGeometry unexpected " << cn << std::endl;
  if(ret>-1) return ret+49152;
  if(foundinx) return -2;
  else return -1;
}
//========
int mxGeometry::PbWO4_FindClosestIdx(int arm, float x0, float y0) {
  int ret = PbWO4_FindIdx(arm,x0,y0);
  float dx = fPbWO4_a0/2;
  float dy = fPbWO4_a1/2;
  if(ret>0) return ret;
  if(ret==-2) {
    ret = PbWO4_FindIdx(arm, x0, y0-dy);
    if(ret>0) return ret;
    ret = PbWO4_FindIdx(arm, x0, y0+dy);
    if(ret>0) return ret;
  } else {
    ret = PbWO4_FindIdx(arm, x0-dx, y0-dy);
    if(ret>0) return ret;
    ret = PbWO4_FindIdx(arm, x0+dx, y0-dy);
    if(ret>0) return ret;
    ret = PbWO4_FindIdx(arm, x0-dx, y0+dy);
    if(ret>0) return ret;
    ret = PbWO4_FindIdx(arm, x0+dx, y0+dy);
    if(ret>0) return ret;
  }
  return -3;
}
